import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\nimport axios from 'axios';\nimport TestHelper, { TEST_CONFIG, setupIntegrationTests } from './test-helper';\n\ndescribe('HCM System Integration Tests', () => {\n  setupIntegrationTests();\n\n  describe('Service Health and Connectivity', () => {\n    test('should have all services healthy', async () => {\n      const healthStatus = await TestHelper.validateServiceHealth();\n      \n      expect(healthStatus.gateway).toBe(true);\n      expect(healthStatus.hr).toBe(true);\n      expect(healthStatus.matching).toBe(true);\n      expect(healthStatus.edge).toBe(true);\n    });\n\n    test('should access gateway service registry', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/services`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('services');\n      expect(Array.isArray(response.data.services)).toBe(true);\n      expect(response.data.services.length).toBeGreaterThanOrEqual(4);\n    });\n\n    test('should access gateway analytics overview', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/analytics/overview`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('services');\n      expect(response.data.services).toHaveProperty('total');\n      expect(response.data.services).toHaveProperty('healthy');\n    });\n  });\n\n  describe('HR Resource Management', () => {\n    let testEmployee: any;\n\n    test('should create a new employee', async () => {\n      testEmployee = await TestHelper.createTestEmployee({\n        name: 'Integration Test Employee',\n        email: `integration-test-${Date.now()}@company.com`\n      });\n\n      TestHelper.expectValidEmployee(testEmployee);\n      expect(testEmployee.name).toBe('Integration Test Employee');\n    });\n\n    test('should retrieve employee by ID', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/hr/employees/${testEmployee.id}`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      TestHelper.expectValidEmployee(response.data);\n      expect(response.data.id).toBe(testEmployee.id);\n    });\n\n    test('should update employee information', async () => {\n      const updateData = {\n        department: 'Data Science',\n        role: 'Senior Data Scientist'\n      };\n\n      const response = await axios.put(\n        `${TEST_CONFIG.services.gateway.url}/api/hr/employees/${testEmployee.id}`,\n        updateData,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data.department).toBe('Data Science');\n      expect(response.data.role).toBe('Senior Data Scientist');\n    });\n\n    test('should search employees by skills', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/hr/employees?skill=JavaScript`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('employees');\n      expect(Array.isArray(response.data.employees)).toBe(true);\n      \n      if (response.data.employees.length > 0) {\n        const employee = response.data.employees[0];\n        TestHelper.expectValidEmployee(employee);\n      }\n    });\n\n    test('should get organization hierarchy', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/hr/organization/hierarchy`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.data)).toBe(true);\n    });\n  });\n\n  describe('Task Matching Engine', () => {\n    let testTask: any;\n    let testEmployee: any;\n\n    beforeAll(async () => {\n      // Create test employee for matching\n      testEmployee = await TestHelper.createTestEmployee({\n        name: 'Matching Test Employee',\n        email: `matching-test-${Date.now()}@company.com`,\n        skills: [\n          { name: 'JavaScript', level: 'expert', yearsOfExperience: 5 },\n          { name: 'React', level: 'advanced', yearsOfExperience: 3 },\n          { name: 'Node.js', level: 'intermediate', yearsOfExperience: 2 }\n        ]\n      });\n    });\n\n    test('should create a new task', async () => {\n      testTask = await TestHelper.createTestTask({\n        title: 'Integration Test Task',\n        requiredSkills: [\n          { name: 'JavaScript', level: 'advanced', mandatory: true, weight: 9 },\n          { name: 'React', level: 'intermediate', mandatory: false, weight: 7 }\n        ]\n      });\n\n      TestHelper.expectValidTask(testTask);\n      expect(testTask.title).toBe('Integration Test Task');\n    });\n\n    test('should find matches for task', async () => {\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/api/matching/tasks/${testTask.id}/matches`,\n        { maxResults: 5, includeRisks: true },\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      TestHelper.expectValidMatchingResult(response.data);\n      \n      if (response.data.matches.length > 0) {\n        const bestMatch = response.data.matches[0];\n        expect(bestMatch.score).toBeGreaterThan(0);\n        expect(bestMatch.reasons.length).toBeGreaterThan(0);\n      }\n    });\n\n    test('should get task recommendations for employee', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/matching/employees/${testEmployee.id}/recommendations?limit=3`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('employeeId', testEmployee.id);\n      expect(response.data).toHaveProperty('recommendations');\n      expect(Array.isArray(response.data.recommendations)).toBe(true);\n    });\n\n    test('should assign task to employee', async () => {\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/api/matching/tasks/${testTask.id}/assign`,\n        {\n          employeeId: testEmployee.id,\n          reason: 'Integration test assignment',\n          overrideRisks: true\n        },\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('success', true);\n      expect(response.data).toHaveProperty('taskId', testTask.id);\n      expect(response.data).toHaveProperty('employeeId', testEmployee.id);\n    });\n\n    test('should get matching analytics', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/matching/analytics/matching?timeRange=1d`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('timeRange', '1d');\n      expect(response.data).toHaveProperty('totalTasks');\n      expect(response.data).toHaveProperty('assignedTasks');\n      expect(response.data).toHaveProperty('assignmentRate');\n    });\n  });\n\n  describe('Edge Agent Distributed System', () => {\n    test('should get edge agent cluster state', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/api/edge/state`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('agentStates');\n      expect(response.data).toHaveProperty('systemMetrics');\n      expect(response.data).toHaveProperty('timestamp');\n    });\n\n    test('should submit distributed task to edge agent', async () => {\n      const distributedTask = {\n        type: 'health_check',\n        payload: { target: 'system' },\n        priority: 5,\n        maxRetries: 2\n      };\n\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/api/edge/tasks`,\n        distributedTask,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(201);\n      expect(response.data).toHaveProperty('taskId');\n      expect(response.data).toHaveProperty('assignedAgent');\n      expect(response.data).toHaveProperty('status', 'pending');\n    });\n\n    test('should get edge agent analytics', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.edge.url}/analytics`,\n        { timeout: TEST_CONFIG.timeouts.api }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('systemMetrics');\n      expect(response.data).toHaveProperty('agentStatistics');\n    });\n  });\n\n  describe('Workflow Orchestration', () => {\n    test('should execute employee onboarding workflow', async () => {\n      const newEmployeeData = {\n        name: 'Workflow Test Employee',\n        email: `workflow-test-${Date.now()}@company.com`,\n        department: 'Marketing',\n        location: 'Seoul',\n        role: 'Marketing Specialist',\n        skills: [\n          { name: 'Social Media', level: 'advanced', yearsOfExperience: 3 },\n          { name: 'Content Writing', level: 'expert', yearsOfExperience: 5 }\n        ],\n        availability: {\n          available: true,\n          capacity: 90,\n          scheduledHours: 10,\n          maxHoursPerWeek: 40\n        }\n      };\n\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/workflows/employee-onboarding`,\n        newEmployeeData,\n        { timeout: TEST_CONFIG.timeouts.workflow }\n      );\n\n      expect(response.status).toBe(201);\n      expect(response.data).toHaveProperty('workflowId');\n      expect(response.data).toHaveProperty('status', 'completed');\n      expect(response.data).toHaveProperty('results');\n      expect(response.data.results).toHaveProperty('employee');\n      \n      // Verify employee was created\n      const employee = response.data.results.employee;\n      TestHelper.expectValidEmployee(employee);\n      expect(employee.name).toBe('Workflow Test Employee');\n    });\n\n    test('should execute task assignment workflow', async () => {\n      const taskData = {\n        title: 'Workflow Test Task',\n        description: 'Task created via workflow orchestration',\n        requiredSkills: [\n          { name: 'JavaScript', level: 'intermediate', mandatory: true, weight: 8 }\n        ],\n        priority: 'high',\n        estimatedHours: 12,\n        deadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days\n        remoteAllowed: true\n      };\n\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/workflows/task-assignment`,\n        taskData,\n        { timeout: TEST_CONFIG.timeouts.workflow }\n      );\n\n      expect(response.status).toBe(201);\n      expect(response.data).toHaveProperty('workflowId');\n      expect(response.data).toHaveProperty('status', 'completed');\n      expect(response.data).toHaveProperty('results');\n      expect(response.data.results).toHaveProperty('task');\n      expect(response.data.results).toHaveProperty('matches');\n    });\n\n    test('should execute health monitoring workflow', async () => {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/workflows/health-monitoring`,\n        { timeout: TEST_CONFIG.timeouts.workflow }\n      );\n\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('workflowId');\n      expect(response.data).toHaveProperty('status', 'completed');\n      expect(response.data).toHaveProperty('results');\n      expect(response.data.results).toHaveProperty('serviceHealth');\n      expect(Array.isArray(response.data.results.serviceHealth)).toBe(true);\n    });\n  });\n\n  describe('Real-time Communication', () => {\n    test('should connect to gateway WebSocket monitoring', async () => {\n      const ws = await TestHelper.connectWebSocket(TEST_CONFIG.services.gateway.ws);\n      \n      let messageReceived = false;\n      const messagePromise = new Promise((resolve) => {\n        ws.on('message', (data) => {\n          const message = JSON.parse(data.toString());\n          if (message.type === 'system_status') {\n            messageReceived = true;\n            resolve(message);\n          }\n        });\n      });\n\n      // Wait for initial system status message\n      const message = await Promise.race([\n        messagePromise,\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('WebSocket message timeout')), 5000)\n        )\n      ]);\n\n      expect(messageReceived).toBe(true);\n      expect(message).toHaveProperty('type', 'system_status');\n      expect(message).toHaveProperty('data');\n\n      ws.close();\n    }, 10000);\n  });\n});