#!/usr/bin/env ts-node\n\nimport axios from 'axios';\nimport WebSocket from 'ws';\nimport { performance } from 'perf_hooks';\nimport TestHelper, { TEST_CONFIG } from '../integration/test-helper';\n\n// Simple color utility\nconst colors = {\n  red: (text: string) => `\\x1b[31m${text}\\x1b[0m`,\n  green: (text: string) => `\\x1b[32m${text}\\x1b[0m`,\n  yellow: (text: string) => `\\x1b[33m${text}\\x1b[0m`,\n  cyan: (text: string) => `\\x1b[36m${text}\\x1b[0m`,\n  gray: (text: string) => `\\x1b[90m${text}\\x1b[0m`,\n  bold: (text: string) => `\\x1b[1m${text}\\x1b[0m`\n};\n\nclass DemoScenario {\n  private static step = 0;\n  private static results: any = {};\n\n  static async run(): Promise<void> {\n    console.log(colors.cyan(colors.bold('\\n🚀 HCM 분산 시스템 통합 데모 시나리오')));\n    console.log(colors.cyan('='.repeat(60)));\n    console.log(colors.gray('인적 자본 관리 기반 분산 시스템 최적화 프로젝트'));\n    console.log(colors.gray('실시간 장애 대응 및 자동 매칭 시연\\n'));\n\n    try {\n      await this.checkSystemHealth();\n      await this.scenario1_EmployeeOnboarding();\n      await this.scenario2_TaskMatching();\n      await this.scenario3_DistributedExecution();\n      await this.scenario4_FailureRecovery();\n      await this.scenario5_RealTimeMonitoring();\n      await this.showFinalResults();\n      \n    } catch (error: any) {\n      console.error(colors.red(colors.bold('\\n❌ 데모 실행 중 오류 발생:')), error.message);\n      process.exit(1);\n    }\n  }\n\n  private static async checkSystemHealth(): Promise<void> {\n    this.printStepHeader('시스템 헬스체크');\n    \n    console.log(colors.yellow('🔍 모든 서비스 상태 확인 중...'));\n    \n    const startTime = performance.now();\n    await TestHelper.waitForServices();\n    const healthCheckTime = Math.round(performance.now() - startTime);\n    \n    const healthStatus = await TestHelper.validateServiceHealth();\n    \n    console.log(colors.green('✅ 시스템 헬스체크 완료'));\n    console.log(`   ⏱️  소요시간: ${healthCheckTime}ms`);\n    \n    for (const [service, healthy] of Object.entries(healthStatus)) {\n      const status = healthy ? colors.green('🟢 정상') : colors.red('🔴 오류');\n      console.log(`   ${status} ${service.toUpperCase()} 서비스`);\n    }\n    \n    this.results.healthCheck = { duration: healthCheckTime, services: healthStatus };\n    await this.delay(2000);\n  }\n\n  private static async scenario1_EmployeeOnboarding(): Promise<void> {\n    this.printStepHeader('시나리오 1: 신규 직원 온보딩 워크플로우');\n    \n    console.log(colors.yellow('👤 신규 직원 등록 시작...'));\n    \n    const employeeData = {\n      name: '김개발',\n      email: `kim.developer.${Date.now()}@company.com`,\n      department: 'Engineering',\n      location: 'Seoul',\n      role: 'Senior Full-Stack Developer',\n      skills: [\n        { name: 'JavaScript', level: 'expert', yearsOfExperience: 6 },\n        { name: 'TypeScript', level: 'advanced', yearsOfExperience: 4 },\n        { name: 'React', level: 'expert', yearsOfExperience: 5 },\n        { name: 'Node.js', level: 'advanced', yearsOfExperience: 4 }\n      ],\n      availability: {\n        available: true,\n        capacity: 85,\n        scheduledHours: 10,\n        maxHoursPerWeek: 40\n      }\n    };\n\n    console.log(colors.cyan('📋 워크플로우 실행:'));\n    console.log('   1️⃣  HR 시스템에 직원 정보 등록');\n    console.log('   2️⃣  Edge Agent 분산 시스템 초기화');\n    console.log('   3️⃣  초기 작업 추천 생성');\n    \n    const startTime = performance.now();\n    \n    try {\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/workflows/employee-onboarding`,\n        employeeData,\n        { timeout: 30000 }\n      );\n\n      const duration = Math.round(performance.now() - startTime);\n      \n      if (response.data.status === 'completed') {\n        console.log(colors.green('✅ 온보딩 워크플로우 완료'));\n        console.log(`   👤 직원 ID: ${response.data.results.employee.id}`);\n        console.log(`   ⏱️  총 소요시간: ${duration}ms`);\n        \n        this.results.onboarding = {\n          employee: response.data.results.employee,\n          duration,\n          success: true\n        };\n      } else {\n        console.log(colors.red('❌ 온보딩 워크플로우 실패'));\n        this.results.onboarding = { success: false };\n      }\n    } catch (error: any) {\n      console.log(colors.red(`❌ 온보딩 실패: ${error.message}`));\n      this.results.onboarding = { success: false };\n    }\n    \n    await this.delay(2000);\n  }\n\n  private static async scenario2_TaskMatching(): Promise<void> {\n    this.printStepHeader('시나리오 2: 지능형 작업 매칭 시스템');\n    \n    const taskData = {\n      title: '마이크로서비스 아키텍처 마이그레이션',\n      description: '기존 모놀리식 애플리케이션을 마이크로서비스로 전환',\n      requiredSkills: [\n        { name: 'Node.js', level: 'advanced', mandatory: true, weight: 9 },\n        { name: 'Docker', level: 'intermediate', mandatory: false, weight: 7 }\n      ],\n      priority: 'high',\n      estimatedHours: 120,\n      deadline: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n      remoteAllowed: true\n    };\n\n    console.log(colors.cyan('🔍 매칭 프로세스 실행...'));\n    \n    const startTime = performance.now();\n    \n    try {\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/workflows/task-assignment`,\n        taskData,\n        { timeout: 30000 }\n      );\n\n      const duration = Math.round(performance.now() - startTime);\n      \n      if (response.data.status === 'completed') {\n        const results = response.data.results;\n        console.log(colors.green('✅ 작업 매칭 완료'));\n        console.log(`   📋 작업 ID: ${results.task.id}`);\n        console.log(`   🎯 매칭된 후보자: ${results.matches.length}명`);\n        console.log(`   ⏱️  소요시간: ${duration}ms`);\n        \n        this.results.matching = {\n          task: results.task,\n          matches: results.matches,\n          duration,\n          success: true\n        };\n      } else {\n        this.results.matching = { success: false };\n      }\n    } catch (error: any) {\n      console.log(colors.red(`❌ 작업 매칭 실패: ${error.message}`));\n      this.results.matching = { success: false };\n    }\n    \n    await this.delay(2000);\n  }\n\n  private static async scenario3_DistributedExecution(): Promise<void> {\n    this.printStepHeader('시나리오 3: 분산 작업 실행');\n    \n    console.log(colors.yellow('⚡ Edge Agent 분산 작업 실행...'));\n\n    const task = {\n      type: 'health_check',\n      payload: { target: 'all_services' },\n      priority: 5\n    };\n\n    try {\n      const response = await axios.post(\n        `${TEST_CONFIG.services.gateway.url}/api/edge/tasks`,\n        task,\n        { timeout: 15000 }\n      );\n      \n      console.log(colors.green('✅ 분산 작업 제출 완료'));\n      console.log(`   🤖 할당된 Agent: ${response.data.assignedAgent}`);\n      \n      this.results.distributedExecution = {\n        success: true,\n        assignedAgent: response.data.assignedAgent\n      };\n      \n    } catch (error: any) {\n      console.log(colors.red(`❌ 분산 작업 실패: ${error.message}`));\n      this.results.distributedExecution = { success: false };\n    }\n    \n    await this.delay(2000);\n  }\n\n  private static async scenario4_FailureRecovery(): Promise<void> {\n    this.printStepHeader('시나리오 4: 자율 장애 복구');\n    \n    console.log(colors.yellow('🛡️ 장애 시뮬레이션 시작...'));\n    \n    try {\n      const response = await axios.get(\n        `${TEST_CONFIG.services.gateway.url}/workflows/health-monitoring`,\n        { timeout: 20000 }\n      );\n      \n      if (response.data.status === 'completed') {\n        console.log(colors.green('✅ 헬스 모니터링 완료'));\n        console.log('   📊 시스템 상태 정상');\n        \n        this.results.failureRecovery = { success: true };\n      } else {\n        this.results.failureRecovery = { success: false };\n      }\n      \n    } catch (error: any) {\n      console.log(colors.red(`❌ 헬스 모니터링 실패: ${error.message}`));\n      this.results.failureRecovery = { success: false };\n    }\n    \n    await this.delay(2000);\n  }\n\n  private static async scenario5_RealTimeMonitoring(): Promise<void> {\n    this.printStepHeader('시나리오 5: 실시간 모니터링');\n    \n    console.log(colors.yellow('📊 실시간 모니터링 연결...'));\n    \n    try {\n      const ws = await TestHelper.connectWebSocket(TEST_CONFIG.services.gateway.ws);\n      console.log(colors.green('✅ WebSocket 연결 성공'));\n      \n      let messagesReceived = 0;\n      \n      const messagePromise = new Promise<void>((resolve) => {\n        const timeout = setTimeout(() => {\n          resolve();\n        }, 3000); // 3초간 모니터링\n        \n        ws.on('message', () => {\n          messagesReceived++;\n        });\n        \n        ws.on('error', () => {\n          clearTimeout(timeout);\n          resolve();\n        });\n      });\n      \n      await messagePromise;\n      ws.close();\n      \n      console.log(colors.green(`✅ 모니터링 완료 - 메시지 ${messagesReceived}개 수신`));\n      \n      this.results.realTimeMonitoring = {\n        messagesReceived,\n        success: true\n      };\n      \n    } catch (error: any) {\n      console.log(colors.red(`❌ 모니터링 실패: ${error.message}`));\n      this.results.realTimeMonitoring = { success: false };\n    }\n    \n    await this.delay(2000);\n  }\n\n  private static async showFinalResults(): Promise<void> {\n    console.log(colors.cyan(colors.bold('\\n📊 데모 시나리오 최종 결과')));\n    console.log(colors.cyan('='.repeat(60)));\n    \n    const scenarios = [\n      { name: '신규 직원 온보딩', key: 'onboarding' },\n      { name: '지능형 작업 매칭', key: 'matching' },\n      { name: '분산 작업 실행', key: 'distributedExecution' },\n      { name: '자율 장애 복구', key: 'failureRecovery' },\n      { name: '실시간 모니터링', key: 'realTimeMonitoring' }\n    ];\n    \n    let successCount = 0;\n    \n    scenarios.forEach((scenario, index) => {\n      const result = this.results[scenario.key];\n      const success = result?.success || false;\n      \n      if (success) successCount++;\n      \n      const status = success ? colors.green('✅ 성공') : colors.red('❌ 실패');\n      console.log(`${index + 1}. ${scenario.name}: ${status}`);\n      \n      if (result?.duration) {\n        console.log(`   ⏱️  소요시간: ${result.duration}ms`);\n      }\n    });\n    \n    console.log(colors.cyan('\\n' + '─'.repeat(60)));\n    console.log(colors.bold(`📈 전체 성공률: ${successCount}/${scenarios.length} (${Math.round(successCount/scenarios.length*100)}%)`));\n    \n    if (successCount === scenarios.length) {\n      console.log(colors.green(colors.bold('\\n🎉 모든 시나리오가 성공적으로 완료되었습니다!')));\n    } else {\n      console.log(colors.yellow(colors.bold('\\n⚠️  일부 시나리오가 실패했습니다.')));\n    }\n    \n    console.log(colors.gray('\\n데모 완료 시간: ' + new Date().toLocaleString('ko-KR')));\n  }\n\n  private static printStepHeader(title: string): void {\n    this.step++;\n    console.log(colors.cyan(colors.bold(`\\n${this.step}. ${title}`)));\n    console.log(colors.cyan('─'.repeat(title.length + 4)));\n  }\n\n  private static async delay(ms: number): Promise<void> {\n    await TestHelper.sleep(ms);\n  }\n}\n\n// 데모 실행\nif (require.main === module) {\n  console.log(colors.gray('데모 시작 시간: ' + new Date().toLocaleString('ko-KR')));\n  \n  DemoScenario.run()\n    .then(() => {\n      console.log(colors.green(colors.bold('\\n✨ 데모 시나리오가 완료되었습니다.')));\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(colors.red(colors.bold('\\n💥 데모 실행 실패:')), error);\n      process.exit(1);\n    });\n}\n\nexport default DemoScenario;