#!/usr/bin/env node

const axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\n// Service URLs\nconst services = {\n  gateway: 'http://localhost:3000',\n  hr: 'http://localhost:3001',\n  matching: 'http://localhost:3002',\n  verification: 'http://localhost:3003',\n  edge: 'http://localhost:3004'\n};\n\n// Test data\nconst testEmployee = {\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  department: 'Engineering',\n  skills: [\n    { name: 'JavaScript', level: 'advanced', yearsOfExperience: 5 },\n    { name: 'Node.js', level: 'expert', yearsOfExperience: 4 },\n    { name: 'React', level: 'intermediate', yearsOfExperience: 3 }\n  ],\n  availability: {\n    available: true,\n    capacity: 80,\n    scheduledHours: 32,\n    maxHoursPerWeek: 40\n  },\n  location: 'Seoul',\n  role: 'Senior Developer',\n  workload: 0,\n  maxHoursPerWeek: 40,\n  timezone: 'Asia/Seoul',\n  performanceRating: 4.5,\n  completionRate: 92\n};\n\nconst testTask = {\n  title: 'Build REST API',\n  description: 'Create a REST API for user management system',\n  requiredSkills: [\n    { name: 'JavaScript', level: 'intermediate', mandatory: true, weight: 8 },\n    { name: 'Node.js', level: 'advanced', mandatory: true, weight: 9 },\n    { name: 'Express', level: 'intermediate', mandatory: false, weight: 6 }\n  ],\n  priority: 'high',\n  estimatedHours: 24,\n  remoteAllowed: true,\n  createdBy: 'system-test'\n};\n\nconst testCertification = {\n  employeeId: '',\n  certificationName: 'AWS Certified Developer',\n  issuer: 'Amazon Web Services',\n  issueDate: new Date('2024-01-15'),\n  expiryDate: new Date('2027-01-15')\n};\n\n// Helper functions\nconst makeRequest = async (method, url, data = null) => {\n  try {\n    const config = {\n      method,\n      url,\n      timeout: 10000,\n      headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (data) {\n      config.data = data;\n    }\n    \n    const response = await axios(config);\n    return { success: true, data: response.data, status: response.status };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      status: error.response?.status,\n      data: error.response?.data\n    };\n  }\n};\n\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst log = (message, data = null) => {\n  console.log(`\\n[${new Date().toISOString()}] ${message}`);\n  if (data) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n};\n\n// Test functions\nconst testHealthChecks = async () => {\n  log('üè• Testing service health checks...');\n  \n  for (const [name, url] of Object.entries(services)) {\n    const result = await makeRequest('GET', `${url}/health`);\n    \n    if (result.success) {\n      log(`‚úÖ ${name.toUpperCase()} service is healthy`, {\n        status: result.data.status,\n        timestamp: result.data.timestamp\n      });\n    } else {\n      log(`‚ùå ${name.toUpperCase()} service is unhealthy`, {\n        error: result.error,\n        status: result.status\n      });\n    }\n  }\n};\n\nconst testEmployeeCreation = async () => {\n  log('üë§ Testing employee creation...');\n  \n  const result = await makeRequest('POST', `${services.hr}/employees`, testEmployee);\n  \n  if (result.success) {\n    log('‚úÖ Employee created successfully', {\n      id: result.data.id,\n      name: result.data.name,\n      department: result.data.department\n    });\n    return result.data.id;\n  } else {\n    log('‚ùå Failed to create employee', result);\n    return null;\n  }\n};\n\nconst testTaskCreation = async () => {\n  log('üìã Testing task creation and matching...');\n  \n  const result = await makeRequest('POST', `${services.matching}/tasks`, testTask);\n  \n  if (result.success) {\n    log('‚úÖ Task created successfully', {\n      id: result.data.task.id,\n      title: result.data.task.title,\n      initialMatches: result.data.initialMatches?.length || 0\n    });\n    return result.data.task.id;\n  } else {\n    log('‚ùå Failed to create task', result);\n    return null;\n  }\n};\n\nconst testCertificationVerification = async (employeeId) => {\n  if (!employeeId) return;\n  \n  log('üéì Testing certification verification...');\n  \n  testCertification.employeeId = employeeId;\n  const result = await makeRequest('POST', `${services.verification}/certifications`, testCertification);\n  \n  if (result.success) {\n    log('‚úÖ Certification added successfully', {\n      id: result.data.certification.id,\n      name: result.data.certification.certificationName,\n      autoVerified: result.data.autoVerified\n    });\n    return result.data.certification.id;\n  } else {\n    log('‚ùå Failed to add certification', result);\n    return null;\n  }\n};\n\nconst testEdgeAgentTasks = async () => {\n  log('üîß Testing edge agent tasks...');\n  \n  // Test health check task\n  const healthCheckTask = {\n    type: 'health_check',\n    payload: {\n      services: Object.values(services).map(url => `${url}/health`)\n    },\n    priority: 8\n  };\n  \n  const result = await makeRequest('POST', `${services.edge}/tasks`, healthCheckTask);\n  \n  if (result.success) {\n    log('‚úÖ Health check task submitted successfully', {\n      taskId: result.data.taskId,\n      assignedAgent: result.data.assignedAgent\n    });\n    \n    // Wait for task completion\n    await wait(3000);\n    \n    // Check task status\n    const statusResult = await makeRequest('GET', `${services.edge}/tasks/${result.data.taskId}`);\n    if (statusResult.success) {\n      log('üìä Task status', {\n        status: statusResult.data.status,\n        result: statusResult.data.result\n      });\n    }\n  } else {\n    log('‚ùå Failed to submit health check task', result);\n  }\n};\n\nconst testMatchingAnalytics = async () => {\n  log('üìà Testing matching analytics...');\n  \n  const result = await makeRequest('GET', `${services.matching}/analytics/matching?timeRange=1d`);\n  \n  if (result.success) {\n    log('‚úÖ Analytics retrieved successfully', {\n      totalTasks: result.data.totalTasks,\n      assignmentRate: result.data.assignmentRate.toFixed(2) + '%',\n      completionRate: result.data.completionRate.toFixed(2) + '%'\n    });\n  } else {\n    log('‚ùå Failed to get analytics', result);\n  }\n};\n\nconst testSystemIntegration = async () => {\n  log('üîÑ Testing system integration...');\n  \n  // Create employee and get recommendations\n  const employeeId = await testEmployeeCreation();\n  if (!employeeId) return;\n  \n  await wait(1000);\n  \n  // Get task recommendations for the employee\n  const recsResult = await makeRequest('GET', `${services.matching}/employees/${employeeId}/recommendations?limit=3`);\n  \n  if (recsResult.success) {\n    log('‚úÖ Task recommendations retrieved', {\n      employeeId,\n      recommendations: recsResult.data.recommendations.length\n    });\n  }\n  \n  // Test credential verification\n  await testCertificationVerification(employeeId);\n  \n  await wait(1000);\n  \n  // Get employee credentials\n  const credResult = await makeRequest('GET', `${services.verification}/employees/${employeeId}/credentials`);\n  \n  if (credResult.success) {\n    log('‚úÖ Employee credentials retrieved', {\n      certifications: credResult.data.certifications.length,\n      verificationScore: credResult.data.verificationScore.overallScore\n    });\n  }\n};\n\n// Main test execution\nconst runTests = async () => {\n  console.log('üöÄ Starting HCM System Integration Tests\\n');\n  console.log('=' .repeat(60));\n  \n  try {\n    // Test 1: Health checks\n    await testHealthChecks();\n    await wait(2000);\n    \n    // Test 2: Employee and task creation\n    await testTaskCreation();\n    await wait(2000);\n    \n    // Test 3: Edge agent tasks\n    await testEdgeAgentTasks();\n    await wait(2000);\n    \n    // Test 4: Analytics\n    await testMatchingAnalytics();\n    await wait(2000);\n    \n    // Test 5: System integration\n    await testSystemIntegration();\n    \n    console.log('\\n' + '=' .repeat(60));\n    log('üéâ All tests completed! Check individual results above.');\n    \n  } catch (error) {\n    console.error('\\n‚ùå Test suite failed:', error.message);\n    process.exit(1);\n  }\n};\n\n// Check if running directly\nif (require.main === module) {\n  runTests().catch(console.error);\n}\n\nmodule.exports = {\n  runTests,\n  testHealthChecks,\n  testEmployeeCreation,\n  testTaskCreation,\n  testCertificationVerification,\n  testEdgeAgentTasks,\n  testMatchingAnalytics,\n  testSystemIntegration\n};", "oldText": "#!/usr/bin/env node\n\nconst axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\n// Service URLs\nconst services = {\n  gateway: 'http://localhost:3000',\n  hr: 'http://localhost:3001',\n  matching: 'http://localhost:3002',\n  verification: 'http://localhost:3003',\n  edge: 'http://localhost:3004'\n};\n\n// Test data\nconst testEmployee = {\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  department: 'Engineering',\n  skills: [\n    { name: 'JavaScript', level: 'advanced', yearsOfExperience: 5 },\n    { name: 'Node.js', level: 'expert', yearsOfExperience: 4 },\n    { name: 'React', level: 'intermediate', yearsOfExperience: 3 }\n  ],\n  availability: {\n    available: true,\n    capacity: 80,\n    scheduledHours: 32,\n    maxHoursPerWeek: 40\n  },\n  location: 'Seoul',\n  role: 'Senior Developer',\n  workload: 0,\n  maxHoursPerWeek: 40,\n  timezone: 'Asia/Seoul',\n  performanceRating: 4.5,\n  completionRate: 92\n};\n\nconst testTask = {\n  title: 'Build REST API',\n  description: 'Create a REST API for user management system',\n  requiredSkills: [\n    { name: 'JavaScript', level: 'intermediate', mandatory: true, weight: 8 },\n    { name: 'Node.js', level: 'advanced', mandatory: true, weight: 9 },\n    { name: 'Express', level: 'intermediate', mandatory: false, weight: 6 }\n  ],\n  priority: 'high',\n  estimatedHours: 24,\n  remoteAllowed: true,\n  createdBy: 'system-test'\n};\n\nconst testCertification = {\n  employeeId: '',\n  certificationName: 'AWS Certified Developer',\n  issuer: 'Amazon Web Services',\n  issueDate: new Date('2024-01-15'),\n  expiryDate: new Date('2027-01-15')\n};\n\n// Helper functions\nconst makeRequest = async (method, url, data = null) => {\n  try {\n    const config = {\n      method,\n      url,\n      timeout: 10000,\n      headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (data) {\n      config.data = data;\n    }\n    \n    const response = await axios(config);\n    return { success: true, data: response.data, status: response.status };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      status: error.response?.status,\n      data: error.response?.data\n    };\n  }\n};\n\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst log = (message, data = null) => {\n  console.log(`\\n[${new Date().toISOString()}] ${message}`);\n  if (data) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n};\n\n// Test functions\nconst testHealthChecks = async () => {\n  log('üè• Testing service health checks...');\n  \n  for (const [name, url] of Object.entries(services)) {\n    const result = await makeRequest('GET', `${url}/health`);\n    \n    if (result.success) {\n      log(`‚úÖ ${name.toUpperCase()} service is healthy`, {\n        status: result.data.status,\n        timestamp: result.data.timestamp\n      });\n    } else {\n      log(`‚ùå ${name.toUpperCase()} service is unhealthy`, {\n        error: result.error,\n        status: result.status\n      });\n    }\n  }\n};\n\nconst testEmployeeCreation = async () => {\n  log('üë§ Testing employee creation...');\n  \n  const result = await makeRequest('POST', `${services.hr}/employees`, testEmployee);\n  \n  if (result.success) {\n    log('‚úÖ Employee created successfully', {\n      id: result.data.id,\n      name: result.data.name,\n      department: result.data.department\n    });\n    return result.data.id;\n  } else {\n    log('‚ùå Failed to create employee', result);\n    return null;\n  }\n};\n\nconst testTaskCreation = async () => {\n  log('üìã Testing task creation and matching...');\n  \n  const result = await makeRequest('POST', `${services.matching}/tasks`, testTask);\n  \n  if (result.success) {\n    log('‚úÖ Task created successfully', {\n      id: result.data.task.id,\n      title: result.data.task.title,\n      initialMatches: result.data.initialMatches?.length || 0\n    });\n    return result.data.task.id;\n  } else {\n    log('‚ùå Failed to create task', result);\n    return null;\n  }\n};\n\nconst testCertificationVerification = async (employeeId) => {\n  if (!employeeId) return;\n  \n  log('üéì Testing certification verification...');\n  \n  testCertification.employeeId = employeeId;\n  const result = await makeRequest('POST', `${services.verification}/certifications`, testCertification);\n  \n  if (result.success) {\n    log('‚úÖ Certification added successfully', {\n      id: result.data.certification.id,\n      name: result.data.certification.certificationName,\n      autoVerified: result.data.autoVerified\n    });\n    return result.data.certification.id;\n  } else {\n    log('‚ùå Failed to add certification', result);\n    return null;\n  }\n};\n\nconst testEdgeAgentTasks = async () => {\n  log('üîß Testing edge agent tasks...');\n  \n  // Test health check task\n  const healthCheckTask = {\n    type: 'health_check',\n    payload: {\n      services: Object.values(services).map(url => `${url}/health`)\n    },\n    priority: 8\n  };\n  \n  const result = await makeRequest('POST', `${services.edge}/tasks`, healthCheckTask);\n  \n  if (result.success) {\n    log('‚úÖ Health check task submitted successfully', {\n      taskId: result.data.taskId,\n      assignedAgent: result.data.assignedAgent\n    });\n    \n    // Wait for task completion\n    await wait(3000);\n    \n    // Check task status\n    const statusResult = await makeRequest('GET', `${services.edge}/tasks/${result.data.taskId}`);\n    if (statusResult.success) {\n      log('üìä Task status', {\n        status: statusResult.data.status,\n        result: statusResult.data.result\n      });\n    }\n  } else {\n    log('‚ùå Failed to submit health check task', result);\n  }\n};\n\nconst testMatchingAnalytics = async () => {\n  log('üìà Testing matching analytics...');\n  \n  const result = await makeRequest('GET', `${services.matching}/analytics/matching?timeRange=1d`);\n  \n  if (result.success) {\n    log('‚úÖ Analytics retrieved successfully', {\n      totalTasks: result.data.totalTasks,\n      assignmentRate: result.data.assignmentRate.toFixed(2) + '%',\n      completionRate: result.data.completionRate.toFixed(2) + '%'\n    });\n  } else {\n    log('‚ùå Failed to get analytics', result);\n  }\n};\n\nconst testSystemIntegration = async () => {\n  log('üîÑ Testing system integration...');\n  \n  // Create employee and get recommendations\n  const employeeId = await testEmployeeCreation();\n  if (!employeeId) return;\n  \n  await wait(1000);\n  \n  // Get task recommendations for the employee\n  const recsResult = await makeRequest('GET', `${services.matching}/employees/${employeeId}/recommendations?limit=3`);\n  \n  if (recsResult.success) {\n    log('‚úÖ Task recommendations retrieved', {\n      employeeId,\n      recommendations: recsResult.data.recommendations.length\n    });\n  }\n  \n  // Test credential verification\n  await testCertificationVerification(employeeId);\n  \n  await wait(1000);\n  \n  // Get employee credentials\n  const credResult = await makeRequest('GET', `${services.verification}/employees/${employeeId}/credentials`);\n  \n  if (credResult.success) {\n    log('‚úÖ Employee credentials retrieved', {\n      certifications: credResult.data.certifications.length,\n      verificationScore: credResult.data.verificationScore.overallScore\n    });\n  }\n};\n\n// Main test execution\nconst runTests = async () => {\n  console.log('üöÄ Starting HCM System Integration Tests\\n');\n  console.log('=' .repeat(60));\n  \n  try {\n    // Test 1: Health checks\n    await testHealthChecks();\n    await wait(2000);\n    \n    // Test 2: Employee and task creation\n    await testTaskCreation();\n    await wait(2000);\n    \n    // Test 3: Edge agent tasks\n    await testEdgeAgentTasks();\n    await wait(2000);\n    \n    // Test 4: Analytics\n    await testMatchingAnalytics();\n    await wait(2000);\n    \n    // Test 5: System integration\n    await testSystemIntegration();\n    \n    console.log('\\n' + '=' .repeat(60));\n    log('üéâ All tests completed! Check individual results above.');\n    \n  } catch (error) {\n    console.error('\\n‚ùå Test suite failed:', error.message);\n    process.exit(1);\n  }\n};\n\n// Check if running directly\nif (require.main === module) {\n  runTests().catch(console.error);\n}\n\nmodule.exports = {\n  runTests,\n  testHealthChecks,\n  testEmployeeCreation,\n  testTaskCreation,\n  testCertificationVerification,\n  testEdgeAgentTasks,\n  testMatchingAnalytics,\n  testSystemIntegration\n};"}]