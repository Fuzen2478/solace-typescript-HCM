version: '3.8'

services:
  # Infrastructure Services

  neo4j:
    image: neo4j:5-community
    container_name: hcm-neo4j
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial_size=512m
      - NEO4J_dbms_memory_heap_max_size=2G
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ['CMD', 'cypher-shell', '-u', 'neo4j', '-p', 'password', 'RETURN 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - hcm-network

  postgres:
    image: postgres:15-alpine
    container_name: hcm-postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=hcm_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hcm-network

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: src/services/api-gateway/Dockerfile
    container_name: hcm-api-gateway
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/hcm_db
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  hr-resource:
    build:
      context: .
      dockerfile: src/services/hr-resource/Dockerfile
    container_name: hcm-hr-resource
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/hcm_db
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  matching-engine:
    build:
      context: .
      dockerfile: src/services/matching-engine/Dockerfile
    container_name: hcm-matching-engine
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/hcm_db
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  verification:
    build:
      context: .
      dockerfile: src/services/verification/Dockerfile
    container_name: hcm-verification
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/hcm_db
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  edge-agent:
    build:
      context: .
      dockerfile: src/services/edge-agent/Dockerfile
    container_name: hcm-edge-agent
    ports:
      - '3005:3005'
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/hcm_db
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  # LDAP Service
  ldap-server:
    build:
      context: .
      dockerfile: development/Dockerfile.ldap
    container_name: hcm-ldap-server
    ports:
      - '3389:3389'
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - hcm-network
    restart: unless-stopped

  # Monitoring and Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: hcm-portainer
    ports:
      - '9000:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - hcm-network

  # Redis Commander (Redis Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hcm-redis-commander
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - hcm-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hcm-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - api-gateway
      - hr-resource
      - matching-engine
      - verification
      - edge-agent
    networks:
      - hcm-network
    restart: unless-stopped

volumes:
  redis_data:
    name: hcm_redis_data
  neo4j_data:
    name: hcm_neo4j_data
  postgres_data:
    name: hcm_postgres_data
  portainer_data:
    name: hcm_portainer_data

networks:
  hcm-network:
    name: hcm-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
