#!/usr/bin/env node\n\nconst axios = require('axios');\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n};\n\nconst log = (message, color = 'reset') => {\n  console.log(`${colors[color]}${message}${colors.reset}`);\n};\n\nconst services = {\n  'API Gateway': 'http://localhost:3000',\n  'HR Resource': 'http://localhost:3001', \n  'Matching Engine': 'http://localhost:3002',\n  'Verification Service': 'http://localhost:3003',\n  'Edge Agent': 'http://localhost:3004',\n  'Outsourcing Service': 'http://localhost:3006'\n};\n\nasync function checkServiceHealth(serviceName, baseUrl) {\n  try {\n    const response = await axios.get(`${baseUrl}/health`, { timeout: 5000 });\n    log(`✓ ${serviceName}: ${response.data.status}`, 'green');\n    return true;\n  } catch (error) {\n    log(`✗ ${serviceName}: ${error.message}`, 'red');\n    return false;\n  }\n}\n\nasync function testCRDTFunctionality() {\n  log('\\n🧪 Testing CRDT Functionality...', 'cyan');\n  \n  try {\n    // Initialize CRDT document\n    const docId = 'test-hr-doc';\n    await axios.post('http://localhost:3004/crdt/documents', { docId });\n    log('✓ CRDT document initialized', 'green');\n    \n    // Add employee\n    const employee = {\n      id: 'emp-001',\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      department: 'engineering',\n      skills: ['JavaScript', 'Node.js', 'React']\n    };\n    \n    await axios.post(`http://localhost:3004/crdt/documents/${docId}/employees`, employee);\n    log('✓ Employee added to CRDT', 'green');\n    \n    // Create assignment\n    const assignment = {\n      employeeId: 'emp-001',\n      taskType: 'development',\n      priority: 8\n    };\n    \n    await axios.post(`http://localhost:3004/crdt/documents/${docId}/assignments`, assignment);\n    log('✓ Assignment created in CRDT', 'green');\n    \n    // Get available employees\n    const availableResponse = await axios.get(`http://localhost:3004/crdt/documents/${docId}/employees/available`);\n    log(`✓ Available employees: ${availableResponse.data.count}`, 'green');\n    \n  } catch (error) {\n    log(`✗ CRDT test failed: ${error.message}`, 'red');\n  }\n}\n\nasync function testVerificationService() {\n  log('\\n🔍 Testing Verification Service...', 'cyan');\n  \n  try {\n    // Test real-time certification verification\n    const certification = {\n      issuer: 'AWS',\n      certificationName: 'AWS Solutions Architect',\n      issueDate: '2023-01-15',\n      expiryDate: '2026-01-15',\n      verificationHash: '1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'\n    };\n    \n    const verifyResponse = await axios.post('http://localhost:3003/verify/real-time', {\n      type: 'certification',\n      data: certification,\n      employeeId: 'emp-001'\n    });\n    \n    log(`✓ Certification verification: ${verifyResponse.data.verificationResult.verified ? 'PASSED' : 'FAILED'}`, \n        verifyResponse.data.verificationResult.verified ? 'green' : 'yellow');\n    log(`  Score: ${verifyResponse.data.verificationResult.score}/100`, 'blue');\n    \n    // Test queue status\n    const queueResponse = await axios.get('http://localhost:3003/queue/status');\n    log(`✓ Verification queue status: ${queueResponse.data.queue.pending} pending`, 'green');\n    \n  } catch (error) {\n    log(`✗ Verification test failed: ${error.message}`, 'red');\n  }\n}\n\nasync function testOutsourcingService() {\n  log('\\n🌐 Testing Outsourcing Service...', 'cyan');\n  \n  try {\n    // Test skill matching\n    const skillMatchResponse = await axios.post('http://localhost:3006/match/skills', {\n      requiredSkills: ['JavaScript', 'React', 'Node.js'],\n      urgency: 'high',\n      maxBudget: 80\n    });\n    \n    log(`✓ Skill matching: ${skillMatchResponse.data.totalMatches} providers found`, 'green');\n    \n    if (skillMatchResponse.data.matches.length > 0) {\n      const topMatch = skillMatchResponse.data.matches[0];\n      log(`  Top match: ${topMatch.providerName} (Score: ${topMatch.overallScore})`, 'blue');\n    }\n    \n    // Test outsourcing request\n    const outsourcingRequest = {\n      requiredSkills: ['Python', 'Django'],\n      estimatedHours: 40,\n      maxBudget: 2000,\n      description: 'Build a web application',\n      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now\n    };\n    \n    const requestResponse = await axios.post('http://localhost:3006/requests', outsourcingRequest);\n    log(`✓ Outsourcing request: ${requestResponse.data.proposals.length} proposals received`, 'green');\n    \n    if (requestResponse.data.bestMatch) {\n      log(`  Best match: ${requestResponse.data.bestMatch.providerName} - $${requestResponse.data.bestMatch.totalCost}`, 'blue');\n    }\n    \n  } catch (error) {\n    log(`✗ Outsourcing test failed: ${error.message}`, 'red');\n  }\n}\n\nasync function testEdgeAgentTasks() {\n  log('\\n⚡ Testing Edge Agent Tasks...', 'cyan');\n  \n  try {\n    // Submit a data sync task\n    const syncTask = {\n      type: 'data_sync',\n      payload: {\n        sourceService: 'hr-resource',\n        targetService: 'matching-engine',\n        dataType: 'employee_skills',\n        docId: 'test-hr-doc'\n      },\n      priority: 7\n    };\n    \n    const taskResponse = await axios.post('http://localhost:3004/tasks', syncTask);\n    log(`✓ Data sync task submitted: ${taskResponse.data.taskId}`, 'green');\n    \n    // Wait a bit for task to process\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Check task status\n    const statusResponse = await axios.get(`http://localhost:3004/tasks/${taskResponse.data.taskId}`);\n    log(`✓ Task status: ${statusResponse.data.status}`, statusResponse.data.status === 'completed' ? 'green' : 'yellow');\n    \n    // Trigger health check\n    const healthCheckResponse = await axios.post('http://localhost:3004/health-check', {\n      services: ['http://localhost:3001/health', 'http://localhost:3002/health']\n    });\n    log(`✓ Health check initiated: ${healthCheckResponse.data.taskId}`, 'green');\n    \n  } catch (error) {\n    log(`✗ Edge Agent test failed: ${error.message}`, 'red');\n  }\n}\n\nasync function runAllTests() {\n  log('🚀 Starting HCM System Integration Tests...', 'bright');\n  \n  // Check all service health\n  log('\\n📊 Checking Service Health...', 'cyan');\n  const healthResults = [];\n  \n  for (const [serviceName, baseUrl] of Object.entries(services)) {\n    const isHealthy = await checkServiceHealth(serviceName, baseUrl);\n    healthResults.push({ serviceName, isHealthy });\n  }\n  \n  const healthyServices = healthResults.filter(r => r.isHealthy).length;\n  const totalServices = healthResults.length;\n  \n  log(`\\n📈 Health Summary: ${healthyServices}/${totalServices} services healthy`, \n      healthyServices === totalServices ? 'green' : 'yellow');\n  \n  if (healthyServices < totalServices) {\n    log('\\n⚠️  Some services are not running. Please start them first:', 'yellow');\n    log('   docker-compose up -d --build', 'blue');\n    log('   # OR for development:', 'blue');\n    log('   pnpm dev:all', 'blue');\n    return;\n  }\n  \n  // Run feature tests\n  await testCRDTFunctionality();\n  await testVerificationService();\n  await testOutsourcingService();\n  await testEdgeAgentTasks();\n  \n  log('\\n🎉 Integration tests completed!', 'bright');\n  log('\\n📋 Next steps:', 'cyan');\n  log('   • Check logs: docker-compose logs -f', 'blue');\n  log('   • Monitor services: http://localhost:9000 (Portainer)', 'blue');\n  log('   • View Neo4j: http://localhost:7474', 'blue');\n  log('   • API Gateway: http://localhost:3000', 'blue');\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  log('\\n👋 Test interrupted by user', 'yellow');\n  process.exit(0);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  log(`\\n💥 Unhandled rejection: ${reason}`, 'red');\n  process.exit(1);\n});\n\n// Run tests\nrunAllTests().catch(error => {\n  log(`\\n💥 Test suite failed: ${error.message}`, 'red');\n  process.exit(1);\n});\n